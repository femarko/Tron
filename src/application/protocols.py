from decimal import Decimal
from typing import (
    Type,
    TypeVar,
    Protocol,
    Any,
    Callable,
    Optional,
)
from src.domain.models import AddressBank


T = TypeVar("T")
Q = TypeVar("Q", bound="QueryProto")

class QueryProto(Protocol[T]):
    def filter_by(self, **kwargs) -> Any: ...
    def first(self) -> Optional[T]: ...
    def order_by(self: Q, *args: Any) -> Q: ...
    def limit(self: Q, number: int) -> Q: ...
    def offset(self: Q, number: int) -> Q: ...
    def all(self) -> list[T]: ...
    def count(self) -> int: ...
    def subquery(self) -> Any: ...
    def desc(self: Q, *args: Any) -> Q: ...


class SessionProto(Protocol[T]):
    def add(self, instance: T) -> None: ...
    def get(self, model_cls: Type[T], instance_id: str | int) -> Optional[T]: ...
    def delete(self, instance: T) -> None: ...
    def commit(self) -> None: ...
    def flush(self) -> None: ...
    def rollback(self) -> None: ...
    def query(self, model_cl: Type[T]) -> QueryProto: ...
    def close(self) -> None: ...


class AddressBankRepoProto(Protocol):
    def add(self, instance: AddressBank) -> None: ...
    def get(self, instance_id: int) -> AddressBank: ...
    def get_recent(self, limit_total: int, page: int, per_page: int) -> dict[str, int | list[dict[str, str | int]]]: ...
    def delete(self, instance: AddressBank) -> None: ...


class UoWProto(Protocol):
    def __enter__(self) -> "UoWProto": ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    def commit(self) -> None: ...
    def flush(self) -> None: ...
    def rollback(self) -> None: ...

    @property
    def repo(self) -> AddressBankRepoProto: ...


class ORMProto(Protocol):
    session_maker: Callable[..., SessionProto]
    query: Type[QueryProto]
    aliased: Callable[..., Any]
    desc: Callable[..., Any]
    integrity_error: Exception
    sqlalchemy_error: Exception

    def start_session(self) -> SessionProto: ...
    def start_mapping(self) -> None: ...
    def create_tables(self) -> None: ...
    def drop_tables(self) -> None: ...


class TronClientProto(Protocol):
    def get_energy_and_bandwidth(self, addr: str) -> dict[str, int]: ...
    def get_balance(self, addr: str) -> Decimal: ...


class TronToolProto(Protocol):
    def get_account_resource(self, addr: str) -> dict: ...
    def get_account_balance(self, addr: str) -> Decimal: ...
