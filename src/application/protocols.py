from typing import (
    Type,
    Protocol,
    Any,
    Callable
)
from src.domain.models import (
    AddressBank,
    DomainModelBase,
    DomainModel
)


class SessionProto(Protocol):
    def add(self, *args) -> None: ...
    def get(self, model_cls: Type[DomainModel], instance_id: str | int) -> DomainModel: ...
    def delete(self, *args) -> None: ...
    def commit(self) -> None: ...
    def flush(self) -> None: ...
    def rollback(self) -> None: ...
    def query(self, model_cl: Type[DomainModel]) -> "QueryProto": ...
    def close(self) -> None: ...


class QueryProto(Protocol):
    def filter_by(self, **kwargs) -> "QueryProto": ...
    def first(self) -> AddressBank: ...
    def order_by(self, *args) -> "QueryProto": ...
    def limit(self, number) -> "QueryProto": ...
    def offset(self, number) -> "QueryProto": ...
    def all(self) -> list[AddressBank]: ...
    def count(self) -> int: ...


class AddressBankRepoProto(Protocol):
    def add(self, instance: AddressBank) -> None: ...
    def get(self, instance_id: int) -> AddressBank: ...
    def get_recent(self, number: int, page: int, per_page: int) -> dict[str, int | list[dict[str, str | int]]]: ...
    def delete(self, instance: AddressBank) -> None: ...


class UoWProto(Protocol):
    # def __init__(
    #         self,
    #         session_maker: Callable[..., SessionProto],
    #         model_cls: Type[DomainModel]
    # ): ...
    def __enter__(self) -> "UoWProto": ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    def commit(self) -> None: ...
    def flush(self) -> None: ...
    def rollback(self) -> None: ...

    @property
    def repo(self) -> AddressBankRepoProto: ...





